{"version":3,"sources":["Components.js","Server.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","react_default","a","createElement","onChange","e","setFilter","target","value","toLowerCase","PersonForm","_useState","useState","name","number","_useState2","Object","slicedToArray","newPerson","setNewPerson","onSubmit","cb","preventDefault","FormHandler","addPerson","type","Person","key","person","onClick","deletePerson","window","confirm","concat","Persons","persons","map","indexOf","filter","Components_Person","id","FlashMessenger","className","message","baseUrl","Server","axios","get","then","response","data","newObject","post","put","delete","App","setPersons","_useState3","_useState4","_useState5","_useState6","setMessage","createMessage","setTimeout","useEffect","r","Components_FlashMessenger","Components_Filter","Components_PersonForm","p","existing","find","o","f","Components_Persons","catch","status","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60543f49.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './index.css'\r\n\r\nconst Filter = props => (\r\n    <p>\r\n        Rajaa näytettäviä:\r\n        <input onChange={(e) => props.setFilter(e.target.value.toLowerCase())} />\r\n    </p>\r\n)\r\n\r\nconst FormHandler = (e, newPerson, cb) => {\r\n    e.preventDefault();\r\n    cb(newPerson)\r\n}\r\n\r\nconst PersonForm = props => {\r\n    const [ newPerson, setNewPerson ] = useState({name:'',number:''})\r\n\r\n    return(\r\n    <form onSubmit={(e) => FormHandler(e, newPerson, props.addPerson)} >\r\n        <div>\r\n            nimi:\r\n            <input onChange={(e) => setNewPerson({name: e.target.value, number: newPerson.number})} />\r\n        </div>\r\n        <div>\r\n            numero:\r\n            <input onChange={(e) => setNewPerson({name: newPerson.name, number: e.target.value})} />\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\">lisää</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nconst PersonDeleteHandler = (cb, person) => {\r\n    if(window.confirm(`Haluatko varmasti poistaa ${person.name}?`)){\r\n        cb(person)\r\n    }\r\n}\r\n\r\nconst Person = props => (\r\n    <li key={props.person.name}>\r\n        {props.person.name}: {props.person.number}\r\n        <button onClick={() => PersonDeleteHandler(props.deletePerson, props.person)}>Poista</button>\r\n    </li>\r\n)\r\n\r\nconst Persons = props => (\r\n    <ul>\r\n        {props.persons.map(person =>\r\n            person.name.toLowerCase().indexOf(props.filter) !== -1 ?\r\n                <Person key={person.id} person={person} deletePerson={props.deletePerson} />\r\n                : null)}\r\n    </ul>\r\n)\r\n\r\nconst FlashMessenger = props => (\r\n    <p className={`flash-message-${props.message.type}`}>{props.message.message}</p>\r\n)\r\n\r\n\r\nexport {Filter, PersonForm, Persons, FlashMessenger}\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n\r\n}\r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update,\r\n    remove: remove\r\n}","import React, { useState, useEffect } from 'react'\nimport {Filter, PersonForm, Persons, FlashMessenger} from './Components'\nimport Server from './Server'\n\n\nconst App = () => {\n    const [ persons, setPersons] = useState([])\n    const [ filter, setFilter] = useState('')\n    const [ message, setMessage] = useState({message: '', type: ''})\n\n    const addPerson = p => {\n      const existing = persons.find(o => o.name === p.name)\n      if(!!existing){\n          if(window.confirm(`${p.name} on jo luettelossa, korvataanko vanha numero uudella?`)){\n              Server.update(existing.id, p)\n                  // Slice existing away and concat new version of it\n                  .then(r => setPersons(persons.filter(f => f.id !== existing.id).concat(r)))\n          }\n      } else {\n          Server.create(p)\n              .then(r => {\n                  setPersons(persons.concat(r))\n                  createMessage(`Lisättiin ${r.name}`,'ok')\n              })\n      }\n    }\n\n    const deletePerson = p => {\n      Server.remove(p.id)\n          .then(r => setPersons(persons.filter(f => f.id !== p.id)))\n          .catch(r => (r.response.status === 404 ?\n            createMessage(`${p.name} on jo poistettu`, 'notice') || true : false))\n\n    }\n\n    const createMessage = (message, type) => {\n        setMessage({message, type})\n        window.setTimeout(() => setMessage({message: '', type: ''}), 3000)\n    }\n\n    const hook = () => {\n      Server.getAll()\n          .then(r => setPersons(r))\n    }\n\n    useEffect(hook, [])\n\n  return (\n      <div>\n          <h2>Puhelinluettelo</h2>\n          <FlashMessenger message={message} />\n          <Filter setFilter={setFilter} />\n          <h3>Lisää uusi</h3>\n          <PersonForm addPerson={addPerson} />\n          <h3>Numerot</h3>\n          <Persons persons={persons} filter={filter} deletePerson={deletePerson} />\n\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}